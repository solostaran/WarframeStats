#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('warframestats:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const isHttp = process.env.HTTP === 'true';
const isProd = process.env.NODE_ENV === 'production';

/**
 * Get port from environment and store in Express.
 */
let port;
if (isHttp)
  port = normalizePort(process.env.PORT || '3000');
else
  port = normalizePort(process.env.PORT || '443');

app.set('port', port);

/**
 * Create HTTP server.
 */
let server;
if (isHttp)
  server = http.createServer(app);
else {
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
  }).listen(80); // redirect port 80 requests to https 443
}


/**
 * Create HTTPS server.
 */
if (!isHttp) {
  const options = {
    key: fs.readFileSync('keys/warstat2020-key.pem'),
    cert: fs.readFileSync('keys/warstat2020-cert.pem')
  };
  server = https.createServer(options, app);
}


/**
 * Listen on provided port, on all network interfaces.
 */

if (isHttp && isProd) { // localhost only
  server.listen(port, '127.0.0.1');
} else {
  server.listen(port);
}
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
